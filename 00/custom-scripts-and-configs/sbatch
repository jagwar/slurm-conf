#!/bin/bash

# MIT No Attribution
# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# The script is used as wrapper to the Slurm sbatch command. Replace <account_id> with the id of your account.

##### WARNING #####

# THE Slurm cluster must have preconfigured all accounts, qos and user associations for this to work
# this wrapper will perform authorization: jobs are accepted if the users are members of the respective groups
# this is a sample not for production, the wrapper should be ported as C code and compiled into a binary once the logic is well defined

#enable or disable the budget checks for the projects
budget="no" #budgeting does not work on the SageMaker cluster, hence it must stay set as NO

#traversing through all arguments using  for loop. try first account then comment for project name
for i in "$@"
do
  if [ -f "$i" ]
  then
    #echo "The provided argument $i is the file."
    project=$(grep -E '^#SBATCH\s--account(.*)' $i | head | sed 's/.*--account\s*=*\s*\(.*\).*/\1/' | tr -d '"')
    auth="account"
    if [ -z "${project}" ];then
      project=$(grep -E '^#SBATCH\s--comment(.*)' $i | head | sed 's/.*--comment\s*=*\s*\(.*\).*/\1/' | tr -d '"')
      auth="comment"
    fi
    # remove account line
  fi
done
if [ -z "${project}" ];then
  project=$(echo "$@" | sed -n -e 's/.*account //p' | awk '{print $1}')
  auth="account"
  if [ -z "${project}" ];then
    project=$(echo "$@" | sed -n -e 's/.*comment //p' | awk '{print $1}')
    auth="comment"
  fi
fi
slurm_command=$(basename "$0")

#remove user submitted qos and account information, they will be reloaded by the wrapper
i=0
ORIGINAL_ARGS=("$@")
TRIMMED_ARGS=()
while [ $i -lt ${#ORIGINAL_ARGS[@]} ]; do
  arg=${ORIGINAL_ARGS[$i]}
  #echo "i = $i; oa[i] = $arg"
  if [ $arg == "--account" ] || [ $arg == "-A" ] || [ $arg == "--qos" ] || [ $arg == "-q" ]; then
    # we want to remove both the "-T" *AND* the following arg.  So we advance i here,
    # and also once more outside of the for loop.
    i=$((i + 1)) # careful!  ((i++)) will kill your script if you use "set -e"
  else
    if [[ $arg != --account=* ]] && [[ $arg != -A* ]] && [[ $arg != --qos=* ]] && [[ $arg != -q* ]];then
      TRIMMED_ARGS+=($arg)
    fi
  fi
  i=$((i + 1)) # careful!  ((i++)) will kill your script if you use "set -e"
done
#echo "TRIMMED_ARGS = ${TRIMMED_ARGS[@]}; length = ${#TRIMMED_ARGS[@]}"

# if inner srun
if [[ ! -z "$SLURM_JOB_ID" ]] && [ "srun" == "$slurm_command" ];then
  comment=$(scontrol show job $SLURM_JOB_ID | grep Comment | cut -d "=" -f 2-)
  /opt/slurm/sbin/${slurm_command} --comment=$comment "${TRIMMED_ARGS[@]}"
  exit 0
fi

if [ -z "${project}" ];then
 echo 'You need to specify a project. Use "--account projectname". Please be aware that "--comment projectname" will be deprecated.'
 echo 'You can find your allocated projects by running "id --name --groups".'
 exit 1
fi

if [ "$auth" == "comment" ];then
 echo 'To specify the project please use "--account projectname". Be aware that "--comment projectname" will be deprecated.'
fi

# make account = project
account=$(echo $project | awk '{print tolower($0)}')
clustername=$(/opt/slurm/bin/scontrol show config --local | awk -F "= " '/ClusterName/ {print $2}')
qos=$(/opt/slurm/bin/sacctmgr show assoc format=qos where account=${account}, user=$USER, cluster=${clustername} -n -P)

#cat /opt/slurm/etc/projects_list.conf | grep $USER | grep ${project} > /dev/null
# instead of above, maintain groups for projects in AD and make users members of these groups

id --groups --name | grep ${account} > /dev/null
# if group member or root
if [ $? -eq 0 ] || [ $EUID -eq 0 ];then
 if [ "${budget}" == "yes" ]; then
     account_id=$(aws sts get-caller-identity --query "Account" --output text)
     budget=$(aws budgets describe-budget --account-id ${account_id} --budget-name "${project}" --query 'Budget.[CalculatedSpend.ActualSpend.Amount,BudgetLimit.Amount]' --output text 2>/dev/null)
     if [ -z "${budget}" ];then
       echo "The Project ${project} does not have any associated budget. Please ask the administrator to create it."
       exit 1
     else
       ActualSpend=$(echo ${budget} | awk '{print $1}')
       BudgetLimit=$(echo ${budget} | awk '{print $2}')
       if (( $(echo "${ActualSpend} < ${BudgetLimit}" | bc -l) ));then
         /opt/slurm/sbin/${slurm_command} --account=${account} --qos=${qos} "${TRIMMED_ARGS[@]}"
         exit 0
       else
         echo "The Project ${project} does not have more budget allocated for this month. We will queue your job in lowest preemptible mode."
         /opt/slurm/sbin/${slurm_command} --account=${account} --qos=idle "${TRIMMED_ARGS[@]}"
         exit 0
       fi
     fi
  else
    /opt/slurm/sbin/${slurm_command} --account=${account} --qos=${qos} "${TRIMMED_ARGS[@]}"
    echo "$USER has submitted ${slurm_command} with account ${account} and qos ${qos} and the payload $@ from the $(hostname) node" >> /fsx/devops/sbatch.log
  fi
else
 echo "You are not allowed to use the project ${project}"
 exit 1
fi
